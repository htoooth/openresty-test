events {
    worker_connections 1024;
}

env app_id;
env secret_id;
env secret_key;
env bucket_name;
env region;

http {
    lua_package_path 'd:\projects\openresty-test\conf\lua\common\?.lua;d:\projects\openresty-test\conf\lua\vender\?.lua;d:\projects\openresty-test\conf\lua\upload\?.lua;;';

    upstream global1 {
        server   localhost:8061 weight=6 max_fails=2 fail_timeout=5s;
        server   localhost:8062 weight=6 max_fails=2 fail_timeout=5s;
        keepalive 100;
    }

    upstream global2 {
        server   localhost:8063 weight=6 max_fails=2 fail_timeout=5s;
        keepalive 100;
    }

    server {
        listen 8060;

        root www;
        index index.html;

        location /test1 {
            proxy_redirect off;
            proxy_pass  http://global1;
            proxy_connect_timeout    300;
            proxy_read_timeout       300;
            proxy_send_timeout       300;
            proxy_set_header   Host   $host;
            proxy_set_header   X-Real-IP  $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   Accept-Encoding "gzip";
        }

        location /static {
            proxy_redirect off;
            proxy_pass  http://global2;
            proxy_connect_timeout    300;
            proxy_read_timeout       300;
            proxy_send_timeout       300;
            proxy_set_header   Host   $host;
            proxy_set_header   X-Real-IP  $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   Accept-Encoding "gzip";
        }
    }

    server {
        listen 8061;

        location / {
            content_by_lua_block {
                ngx.say("hello, server 8061")
            }
        }
    }

    server {
        listen 8062;

        location / {
            content_by_lua_block {
                ngx.say("hello, server 8062")
            }
        }
    }

    server {
        listen 8063;

        location / {
            content_by_lua_block {
                ngx.say("hello, server 8063")
            }
        }
    }

    server {
        listen 8064;
        default_type application/json;

        location / {
            # add_header Access-Control-Allow-Origin *;
            # add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            # add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';

            # if ($request_method = 'OPTIONS') {
            #     return 204;
            # }

            proxy_redirect off;
            proxy_pass  http://localhost:8065;
            proxy_connect_timeout    300;
            proxy_read_timeout       300;
            proxy_send_timeout       300;
            proxy_set_header   Host   $host;
            proxy_set_header   X-Real-IP  $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   Accept-Encoding "gzip";
        }
    }

    server {
        listen 8065;
        default_type application/json;

        location / {

            # add_header Access-Control-Allow-Origin *;
            # add_header Access-Control-Allow-Methods 'GET, POST, PUT, OPTIONS';
            # add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-Custom-Header';

            # if ($request_method = 'OPTIONS') {
            #     return 204;
            # }


            content_by_lua_block {
                local cjson = require "cjson"

                ngx.say(cjson.encode({
                    code = 200,
                    msg = '成功',
                    data = ''
                }))
            }
        }
    }

    server {
        listen 8080;

        location /upload {
            default_type  application/json;
            resolver 8.8.8.8 114.114.114.114 valid=3600s;
            content_by_lua_file conf/lua/main.lua;
        }

        location / {
            # content_by_lua '
            #     ngx.say("hello, huangtao1")
            # ';

            # content_by_lua_block {
            #     ngx.say("hello, huangtao2")
            # }

            content_by_lua_file conf/lua/test1.lua;
        }
    }
}


# tcp
stream {
    upstream test-server {
        server localhost:10005;
        server localhost:10006;
    }

    server {
        listen 10004;
        proxy_pass test-server;
    }

    server {
        listen 10005;
        return 'huangtao1';
    }

    server {
        listen 10006;
        return 'huangtao2';
    }
}
