
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  text/html;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    lua_package_path '$prefix/yoho-site/lualib/?.lua;;';

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        lua_code_cache off;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # 请求顺序
        # location = / {
        #     echo "ruleA";
        # }

        # location = /login {
        #     echo "ruleB";
        # }

        # location ^~ /static/ {
        #     echo "ruleC";
        # }

        # location ^~ /static/files {
        #     echo "ruleX";
        # }

        # location ~ \.(gif|jpg)$ {
        #     echo "ruleD";
        # }

        # location ~* \.png$ {
        #     echo "ruleE";
        # }

        # location /img {
        #     echo "ruleF";
        # }

        # 代理
        location /proxy {
            proxy_pass https://github.com;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /proxy/README.md {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;
        }

        # get 请求
        location = /sum {
            internal;

            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }

        # post 请求
        location /hello {
            content_by_lua_block {
                ngx.req.read_body()

                local data = ngx.req.get_body_data()

                ngx.say("hello ", data)
            }
        }

        # 请求参数打印
        location /print_param {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()

                for k,v in pairs(args) do
                    ngx.say("[GET ] key:", k, " v:", v)
                end

                ngx.req.read_body()

                local args = ngx.req.get_post_args()

                for k,v in pairs(args) do
                    ngx.say("[POST] key:", k, " v:", v)
                end
            }
        }

        # 子查询
        location = /app/test {
            content_by_lua_block {
                local res = ngx.location.capture("/sum", {args={a=4,b=8}})

                ngx.say("status:", res.status, " response:", res.body)
            }
        }

        location /test {
            content_by_lua_block {
                local res = ngx.location.capture(
                    '/print_param',
                    {
                        method = ngx.HTTP_POST,
                        args = ngx.encode_args({a = 1, b = '8&'}),
                        body = ngx.encode_args({c = 3, d = '4&'})
                    }
                )

                ngx.say(res.body)
            }
        }

        # 分块输出
        location /test2 {
            content_by_lua_block {
                ngx.say("hello")
                ngx.flush()
                ngx.sleep(3)
                ngx.say('the world')
            }
        }

        location /test3 {
            content_by_lua_block {
                ngx.say(string.rep('hello', 1000))
                ngx.sleep(3)
                ngx.say('the world')

                local obj
                ngx.log(ngx.ERR, 'num:', 1)
                ngx.log(ngx.INFO, 'string:', 'huangtao')
                print([[i am print]])
                ngx.log(ngx.ERR, 'object:', obj)
            }
        }

        # 防火墙
        location /sum-test {
            access_by_lua_block {
                local black_ips = {['127.0.0.1'] = true}

                local ip = ngx.var.remote_addr

                if (true == black_ips[ip]) then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }

            content_by_lua_block {
                local a = tonumber(ngx.var.arg_a) or 0
                local b = tonumber(ngx.var.arg_b) or 0

                ngx.say("sum:", a + b)
            }
        }

        location /file {
            default_type application/json;
            # content_by_lua_file yoho-site/main.lua;

            content_by_lua_block {
                ngx.say(package.path)
            }
        }

        # hello world
        location / {
            content_by_lua_block {
                ngx.say("HelloWorld")
            }
        }

        # location / {
        #     root   html;
        #     index  index.html index.htm;
        # }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
